var searchIndex = {};
searchIndex["tobj"] = {"doc":"Tiny OBJ loader, inspired by Syoyo&#39;s excellent [tinyobjloader](https://github.com/syoyo/tinyobjloader).\nAims to be a simple and lightweight option for loading OBJ files, just returns two vecs\ncontaining loaded models and materials. All models are made of triangles, any quad or polygon faces\nin an OBJ file will be converted to triangles. Note that only polygons that are trivially\nconvertible to triangle fans are supported, arbitrary polygons may not behave as expected.\nThe best solution would be to re-export your mesh using only triangles in your modeling software.","items":[[3,"Mesh","tobj","A mesh made up of triangles loaded from some OBJ file",null,null],[12,"positions","","Flattened 3 component floating point vectors, storing positions of vertices in the mesh",0,null],[12,"normals","","Flattened 3 component floating point vectors, storing normals of vertices in the mesh. Not\nall meshes have normals, if no normals are specified this Vec will be empty",0,null],[12,"texcoords","","Flattened 2 component floating point vectors, storing texture coordinates of vertices in\nthe mesh. Not all meshes have normals, if no texture coordinates are specified this Vec\nwill be empty",0,null],[12,"indices","","Indices for vertices of each triangle. Each face in the mesh is a triangle and the indices\nspecify the position, normal and texture coordinate for each vertex of the face.",0,null],[12,"material_id","","Optional material id associated with this mesh. The material id indexes into the Vec of\nMaterials loaded from the associated MTL file",0,null],[3,"Model","","A named model within the file, associates some mesh with a name that was specified with an `o`\nor `g` keyword in the OBJ file",null,null],[12,"mesh","","Mesh used by the model containing its geometry",1,null],[12,"name","","Name assigned to this mesh",1,null],[3,"Material","","A material that may be referenced by one or more meshes. Standard MTL attributes are supported.\nAny unrecognized parameters will be stored as key-value pairs in the `unknown_param` `HashMap`,\nwhich maps the unknown parameter to the value set for it.",null,null],[12,"name","","Material name as specified in the MTL file",2,null],[12,"ambient","","Ambient color of the material",2,null],[12,"diffuse","","Diffuse color of the material",2,null],[12,"specular","","Specular color of the material",2,null],[12,"shininess","","Material shininess attribute",2,null],[12,"dissolve","","Dissolve attribute is the alpha term for the material. Referred to as dissolve since that&#39;s\nwhat the MTL file format docs refer to it as",2,null],[12,"ambient_texture","","Name of the ambient texture file for the material. No path is pre-pended to the texture\nfile names specified in the MTL file",2,null],[12,"diffuse_texture","","Name of the diffuse texture file for the material. No path is pre-pended to the texture\nfile names specified in the MTL file",2,null],[12,"specular_texture","","Name of the specular texture file for the material. No path is pre-pended to the texture\nfile names specified in the MTL file",2,null],[12,"normal_texture","","Name of the normal map texture file for the material. No path is pre-pended to the texture\nfile names specified in the MTL file",2,null],[12,"dissolve_texture","","Name of the alpha map texture file for the material. No path is pre-pended to the texture\nfile names specified in the MTL file. Referred to as dissolve to match the MTL file format\nspecification",2,null],[12,"unknown_param","","Key value pairs of any unrecognized parameters encountered while parsing the material",2,null],[4,"LoadError","","Possible errors that may occur while loading OBJ and MTL files",null,null],[13,"OpenFileFailed","","",3,null],[13,"ReadError","","",3,null],[13,"UnrecognizedCharacter","","",3,null],[13,"PositionParseError","","",3,null],[13,"NormalParseError","","",3,null],[13,"TexcoordParseError","","",3,null],[13,"FaceParseError","","",3,null],[13,"MaterialParseError","","",3,null],[13,"InvalidObjectName","","",3,null],[13,"GenericFailure","","",3,null],[5,"load_obj","","Load the various objects specified in the OBJ file and any associated MTL file\nReturns a pair of Vecs containing the loaded models and materials from the file.",null,{"inputs":[{"name":"path"}],"output":{"name":"loadresult"}}],[5,"load_mtl","","Load the materials defined in a MTL file\nReturns a pair with a Vec holding all loaded materials and a HashMap containing a mapping of\nmaterial names to indices in the Vec.",null,{"inputs":[{"name":"path"}],"output":{"name":"mtlloadresult"}}],[5,"print_model_info","","Print out all loaded properties of some models and associated materials",null,null],[5,"print_material_info","","Print out all loaded properties of some materials",null,null],[6,"LoadResult","","`LoadResult` is a result containing all the models loaded from the file and any materials from\nreferenced material libraries, or an error that occured while loading",null,null],[6,"MTLLoadResult","","`MTLLoadResult` is a result containing all the materials loaded from the file and a map of MTL\nname to index or the error that occured while loading",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new mesh specifying the geometry for the mesh",0,{"inputs":[{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"vec"},{"name":"option"}],"output":{"name":"mesh"}}],[11,"empty","","Create a new empty mesh",0,{"inputs":[],"output":{"name":"mesh"}}],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"new","","Create a new model, associating a name with a mesh",1,{"inputs":[{"name":"mesh"},{"name":"string"}],"output":{"name":"model"}}],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"empty","","",2,{"inputs":[],"output":{"name":"material"}}],[11,"fmt","","",3,null]],"paths":[[3,"Mesh"],[3,"Model"],[3,"Material"],[4,"LoadError"]]};
initSearch(searchIndex);
